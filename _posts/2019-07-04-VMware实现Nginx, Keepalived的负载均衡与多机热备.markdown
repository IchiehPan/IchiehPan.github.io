---
layout: post
title:  "VMware实现Nginx, Keepalived的负载均衡与多机热备"
date:   2019-07-04 09:00:00 +0800
categories: blog
---

环境: 
Vmware 15.1
ubuntu18 for server
nginx1.14
keepalived1.3.9

ip: 192.168.8.110
ip: 192.168.8.113

首先需要VMware创建两台Linux服务器, 网络配置为**桥接**

![](https://ichiehpan.github.io/images/微信图片_20190704114216.jpg)

两台机器分别安装`nginx`与`keepalived`

```shell
#两台服务器都要执行
#安装
sudo apt install nginx keepalived -y
#开机自启
#sudo systemctl enable nginx
#sudo systemctl enable keepalived
#启动服务
sudo systemctl start nginx
sudo systemctl start keepalived
#查看服务
sudo systemctl status nginx
sudo systemctl stauts keepalived
```

![](https://ichiehpan.github.io/images/微信截图_20190704115609.png)
![](https://ichiehpan.github.io/images/微信截图_20190704115719.png)

修改
/etc/nginx, /etc/keepalived下的配置文件

apt 安装的`keepalived`etc目录下无对应默认配置文件, 需要自己生成

```shell
ichieh@192.168.8.113:~$ sudo vim /etc/nginx/sites-enabled/default
```

```
upstream wordpress{ # 要与server_name的名字一致
      server 127.0.0.1:9000;
      server 192.168.8.110:9000;
}

server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        #root /var/www/html;
        root /var/www/wordpress;

        # Add index.php to the list if you are using PHP
        index index.php index.html index.htm index.nginx-debian.html;

        #server_name _;
        server_name wordpress.ichieh.org;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        location ~ \.php$ {
                include snippets/fastcgi-php.conf;

                # With php-fpm (or other unix sockets):
                #fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
                # With php-cgi (or other tcp sockets):
                fastcgi_pass wordpress;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}

```

```shell
ichieh@192.168.8.110:~$ sudo vim /etc/nginx/sites-enabled/default
```

```
upstream wordpress{ # 要与server_name的名字一致
      server 127.0.0.1:9000;
      server 192.168.8.113:9000; #分别对应三台web服务器
}

server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        #root /var/www/html;
        root /var/www/wordpress;

        # Add index.php to the list if you are using PHP
        index index.php index.html index.htm index.nginx-debian.html;

        #server_name _;
        server_name wordpress.ichieh.org;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        location ~ \.php$ {
                include snippets/fastcgi-php.conf;

                # With php-fpm (or other unix sockets):
                #fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
                # With php-cgi (or other tcp sockets):
                fastcgi_pass wordpress;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}

```

```shell
ichieh@192.168.8.113:~$ sudo vim /etc/keepalived/keepalived.conf
```

```
! Configuration File for keepalived
#

global_defs {
  notification_email {                   #邮件提醒
  }
  notification_email_from XXX@XXX.com
  #smtp_server XXX.smtp.com
  #smtp_connect_timeout 30
  router_id LVS_DEVEL
}

vrrp_instance VI_1 {                     #两边使用同一个实例`VI_1`
  state MASTER                           #当前实例角色,如,MASTER,BACKUP
  interface ens33                        #注意这个为你的网卡`ens33`, 发送心跳的网卡接口
  virtual_router_id 51
  priority 100                           #优先度, 建议节点之间优先级步长为50
  advert_int 1                           #心跳包发送时间间隔,默认为1秒
  authentication {                       #MASTER和BACKUP通信验证
    auth_type PASS                       #使用PASS方式
    auth_pass 8888                       #默认密码为1111
  }
  virtual_ipaddress {
    192.168.8.200                        #该IP需为`192.168.8.XXX`
  }
}

```

```shell
ichieh@192.168.8.110:~$ sudo vim /etc/keepalived/keepalived.conf
```

```
! Configuration File for keepalived
#

global_defs {
  notification_email {
  }
  notification_email_from XXX@XXX.com
  #smtp_server XXX.smtp.com
  #smtp_connect_timeout 30
  router_id LVS_DEVEL
}

vrrp_instance VI_1 {
  state BACKUP
  interface ens33
  virtual_router_id 51
  priority 99
  advert_int 1
  authentication {
    auth_type PASS
    auth_pass 8888
  }
  virtual_ipaddress {
    192.168.8.200
  }
}

```

完成配置文件之后我们可以重新启动`nginx`和`keepalived`
```shell
#两台服务器都要执行
sudo systemctl restart nginx
sudo systemctl restart keepalived
```

这个时候可以查看下绑定vip结果
```shell
ichieh@192.168.8.113:~$ ip a s ens33
ichieh@192.168.8.110:~$ ip a s ens33
```

下面动图为网络上寻找的, 方便理解
![](https://klionsec.github.io/img/keepalived%20start%20status.gif)
![](https://klionsec.github.io/img/keepalived%20nginx.gif)

最后需注意`keepalived`只有当系统级别的宕机才会主动接管

参考资料
https://klionsec.github.io/2017/12/23/keepalived-nginx/